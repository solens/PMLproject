install.packages("RMySQL", type = "source")
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.packages("RMySQL")
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("rstats-db/DBI")
devtools::install_github("rstats-db/RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome", hot="genome-mysql.cse.ucsc.edu")
load(RMySQL)
mysql --user=genome --host=genome-mysql.cse.ucsc.edu -A
q()
swirl()
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
?n_district
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts,desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res=gather(students2,sex_class,count)
res=gather(students2,sex_class,count,-grade)
res<-=gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric("class5")
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
?passed
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
?select
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
0
quit()
library(swirl)
rm(list=ls())
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
now()
this_moment<-now()
this_moment
week(this_moment)
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
install_from_swirl("Exploratory Data Analysis")
dt2
ymd(dt2)
update(this_moment, hours=8,minutes=34,seconds=55)
this_moment
this_moment<-update(this_moment,hours=3,minutes=39)
this_moment
nyc<-now("America/New_York")
nyc
install_from_swirl("Exploratory Data Analysis")
depart<-nyc+days(2)
depart
depart<-update(depart,hous=17,minutes=34)
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
with_tz(arrive,"Asia/Hong_Kong")
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17,2008",tz="Singapore")
last_time<-mdy("June 17, 2008",tz="Singapore")
play()
last_time<-mdy("June 17,2008",tz="Singapore")
last_time
nxt()
last_time
?new_interval
play()
this_moment
this_moment - last_time
a<-this_moment - last_time
a
minutes(a)
class(a)
as.Date(a)
as.integer(a)
as.numeric(a)
nxt()
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
swirl()
install.packages("lattice")
library(ggplot2)
library(grDevices)
ls()
x=1:300
e<-rnorm(300,5,10)
y<-0.5*x+e
plot(x,y)
e<-rnorm(300,100,10)
y<-0.5*x+e
plot(x,y)
plot(e)
?abline
abline(h=100)
plot(e-100)
plot(e)
plot(e-100)
plot(100-e)
clear()
hist(e)
hist(e,nbin=30)
?hist
hist(e,breaks=30)
hist(e,breaks=70:20:200)
hist(e,breaks=70:50:200)
hist(e,breaks=70:200)
hist(e,breaks=20)
hist(e,breaks=10)
color()
colors()
hist(e,breaks=10,col = "salmon")
par(bg="tomato")
par(bg="tomato1")
par(col="tomato1")
par(mar=12px)
par(mar=12)
par("bg")
title(x="jkeflkemf")
title(x="----------------------------")
library(swirl)
rm(list=ls())
swirl()
p <- c(.1, .2, .3, .4)
x <- 2 : 5
xx<-x^2
u<-x*p
v<-(p*xx)-u^2
v<-(p*xx)-sum(u)^2
sum(v)
sum(u)
v<-p*xx
v
v-sum(u)
v-sum(u)^2
x1<-(x-sum(u))^2
x1
v<-p*x1
v
sum(v)
x <- 1:4
p <- x/sum(x)
x*p
sum(x*p)
?t.test
a<-c(140,138,150,138,145)
a<-c(140,138,150,148,135)
b<-c(132,135,151,146,130)
t.test(a,b,alternative = "two.sided")
t.test(a,b,alternative = "two.sided",paired=TRUE)
?dt
library(swirl)
swirl()
23/36
33/36
deck
52
4/52
0
12/52
2/51
0.8*1.6/2
0.64
mypdf
integrate(mypdf,0,1.6)
1
4
sqrt(2)
0.997*0.001
.003*.999
0.015*.999
.997*.001/(.997*.001 + (.015*.999))
3.5
expect_dice()
expect_dice(seq(1/6,length.out = 6))
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)/2
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
a<-"(((())))()((((((((())()(()))(()((((()(()(((()((()((()(()()()()()))(((()(()((((((((((())(()()((())()(((())))()(()(()((()(()))(()()()()((()((()(((()()(((((((()()())()((((()()(((((()(())()(())((())()()))()(((((((())(()())(()(((())(()))((())))(()((()())))()())((((())))(()(((((()(())(((()()((()((()((((((((((())(()())))))()))())()()((((()()()()()()((((((())())(((()())()((()()(((()()()))(((((()))(((()(()()()(()(()(((())()))(()(((()((())()(()())())))((()()()(()()(((()))(((()((((()(((((()()(()())((()())())(()((((((()(()()))((((()))))())((())()()((()(()))))((((((((()))(()()(((())())(())()((()()()()((()((()((()()(((())))(()((())()((((((((()((()(()()(((())())())))(())())))()((((()))))))())))()()))()())((()())()((()()()))(()()(((()(())((((())())((((((((()()()()())))()()()((((()()))))))()((((()(((()))(()()())))((()()(((()))()()())())(((())((()()(())()()()(((())))))()())((()))()))((())()()())()())()()(()))())))())()))(())((()(())))(()(())(()))))(()(())())(()(())(()(()))))((()())()))()((((()()))))())))()()())((())()((()()()))()(((()(()))))(())()()))(((()())))))))))(((())))()))())()))))()()(((())))))))()(()()(()))((()))))((())))((()((())))())))()()(()))())()(()((()())(()(()()())())(()()))()))))(()())()()))()()()()))(()(()(()))))))()(()))()))()()(()((())(()(())))()(((())(())())))))()(()(()))))()))(()()()(())()(()(())))()))))()()(((((())))))())()())())())()())()))))()))))))))())()()()()()()())))()))((())()))())))()((())()))))()))())))))))())()()()))()()(()((((()(((((((()(())((()())((()()))()))))(())))()()()(())((())()())))(())))(())))(((()()))()(())(((()(()))((())))())()))((((()))())()))))))))()(())())))(()))()(()()))())()()(())())))())()()(()())))()((()())(()(())(())))))))))))))(()))))()))))))()()())(()(((((()(()())))())()))(()))()))(()()))()())(()))())()(())((()()))))))())))())()(((())))(()(()))()()))()(()))))))((()())(()))))))()())))()()))))))))((((((((()()()(()))))))()())))())))()()((())()))((())(())))())())))()()()((()((()(())))())()(())))))))))()())))()()()()()()))()))((())())(()(()))))))(()()))()))(())))()))))))))))))(()))))))))()))))()))()())()))()()))))))()))))((()))))(()))())()(())))(()())((((()())))()))))(()))()(()()(())))))())))))()))))))())))())))))())))())())))())(()))))(())()(())))())()))((()()))))))())))((())))))))())))(())))))()()())))))())))))()))))))()))()()()(()(((()())())())(()))())))))((()(())(()))))))))(())))()()()())())(()))))()()()))()))())())())()(())))()(((()((((())))))))()))))))))))))))))))))((())()())(()))))()()))))))(()()(())())))())))((())))((())))))))))))))()))))()(()))))))())))))()))(()()())(()())))))))))()))))))(())))))()()))()())(((())))()))(()))))))))(())())))())))())())())()()))((())()(())()())()))()())(())(()))))()())))(()(((()))))))()(()())()()()))()))))))))()()()(())()())()(((((()))()())())(()))))()()()(())))())))()((()())))(()))())()(()())())(()))()()))((()()))((()()()()())))(())()))(()(())))((()()))))))))())))))))())()()))))))))))))))))(())()(())(())()())())()))()(()))))())())))))()())()(()))()()(())))(())())))))(()))))))))))))))())())(())(())))(((()))()))))())((())(()))())))))))())))))())))()))()))))))))))))())()))))()))))((()))(())))()(())))(())()))()))())))())))))))()(()())())))()()())))(())))))(()))))))))))))(()))()))()))())))(((()()()(())((()())))()())(((()))(())()))((()()()())))())(())(()))))()(((((())))(()))())())))))))((((()()()))())())()(()(()())))))))))()())())))(())))()())(((()(())())()()))())())))))))((()())((()()(()))(()(())))()))()))(()))(()))()()(()(((())((((()))()(()))((())()(()(()())()(()))()())))))(()))()))())()())))())))(())))((())(()())))))()))(())(()))()())()(()()((()(()))))))()(())(()())(())()))(((())()))(()()(()()()))))(()(())))()))))())))))())(()()()()()()(((())))(()()))()((())(((((()()())))(()))(()))()()))(((())())()(((()()()()))))(()))(())())))()())(()()())())))))))()))))((())))()())(()))(()(()))())))))())(())))))()()())())()))()()(())))(()))(())((((((())(()))(()))())()))(()()(())))()))(()()))()))()(())))(())))((()(()))(())()()())())))(((()()())(())()))))))()(((()(((((()()(((())(())))())()((()))))((()())()(())(((())))(((()((()(()(()))(()()))())(()))(())(())))()))))))((((()))()((((()(()))()))()()))))()(()(()))()(()((()(((()(()()(((()))))()(((()(()(()(((()(()())())()()(()(()())())(()((((())(()))()))(((((()()())(())()((()()())))()()(((()()))()((((((((()(())))())((()))))(())))(()))))((()((((()()(())(((((()))(((((((((((((()())))((((()(((()((())())()))((()))()(()()((()()()()(()()(()(()(((())()(()((((((()((()()((())()((((()((()()(()()())((()()()((()((())()(()(((()((())((((())(()))((()(()))(()())()((((((((()(((((((((((()))(()(((()(()()()((((())((())()())()))(())((())(()))(((()((()(())))(()))))((()()))))((((()(()(()())(()(())((((((((()((((()((()(((((()))())()(()))(()()((()(())(((((()(())()(((((()()))))))()(((())()(()()((((())()((())((()(((())(((()))((()()((((()(())))))((()((((()((()((()(((())((()))(((((((()(((()((((((((())()))((((())(((((()((((((((()(((()((()(((()()(((()((((((()()(()((((((((()()(()(()(())((((()())()))))(((()))((((())((((()())((()(())()((()((((((()((((((()(())))()())(((())())())()(())()(()())((()()((((())((((((())(()(((((()((((())()((((()(()(())(()())(((())()((())((((()))()((((((())(()(((()(((()((((((()(((()))(()()())())((()((()())()((((())(((()(()(((((((((())(())))()((()()()()(())((()))(((((((()(((((((((()(()))))(()((((((((()((((()((()()((((((()()(((((((()(()(())()(())((()()()((()(((((()())()(((((()())()()((()(()())(()()()(((()()(((((()((((((()()((()(()()()((((((((((((()((((((((()()(((()())))()(((()()(())())((((()((((()((((()()()(())(())((()(()(((((((((((((((()(())(())))))()()))((()(((()(())((()(((()(()()((((()()(((()(((()(((((()()((()(()(((()))((((((()((((((((()((()((())(((((()(((())(())())((()()))((((())()()((()(((()(((((()()(((()))(((()(()(((((((((((((()))((((((((()(((()))))())((((((((((((())((())((()())(((())((())(()((((((((((()(((())((()()(()((())(((((((((((()))((((((((((((()(()())((()((()((()(()(((()((((((((()()(()((()(()(((()))((()))(((((((((((((()(())((((((())(((()(())(()(()(()((()()))((((()((((()((((())))())((((()((((()))((((((()((((((()((()(((())))((())(()))(()((()((((()((()(((()()))((((()()()(((((((())(((())(()))())((((()())(((()(((((((((((()(()(()((()(((((((((((((((()()((((()((((((((()(((()()((()((((()))(((()(())((((((()((((())()((((()((()))(())()(()(((()((())())((((((()(()(())())(((())(()(()())(((((()((()((())()())(())))(((()(())))))))(((()(((()))()((()(((()()((()())()()))())))(((()))(()(((()(((((((((()(()(((((()()(((()())()()))))()(((()))(((()(()(()(()(()))()(())()))(()(((())))(()))))))))))(())((()((())((()(())()(())((()()((((()()((()()))((())(((()((()(())(())))()(()(((((()((()))())()(((((()()(((()(()((((((())(()))(())()))((()(()()))(())())()))(((())))(()((()(((())(())())))((()()((((((((((((((()((()(()()(()(((()))())()()((()()()(())(()))(()())(((())((())()(())()()(()()(())))((()(((()))))(((()()(()()))())((()((())()))((((()()()())((())))(((()(())(((((()(((((()((()(()((((()()(((()()()(((()())(((()()((((())(()))(((()))(())())((()))(((()((()))(((()()((())((()(((((()((((()()())((()))()((((()((()(()()()("
))))
)
)
))))))))))))))))
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
a<-"(())))()("
a
a<-"(((())))()((((((((())()(()))(()((((()(()(((()((()((()(()()()()()))(((()(()((((((((((())(()()((())()(((())))()(()(()((()(()))(()()()()((()((()(((()()(((((((()()())()((((()()(((((()(())()(())((())()()))()(((((((())(()())(()(((())(()))((())))(()((()())))()())((((())))(()(((((()(())(((()()((()((()((((((((((())(()())))))()))())()()((((()()()()()()((((((())())(((()())()((()()(((()()()))(((((()))(((()(()()()(()(()(((())()))(()(((()((())()(()())())))((()()()(()()(((()))(((()((((()(((((()()(()())((()())())(()((((((()(()()))((((()))))())((())()()((()(()))))((((((((()))(()()(((())())(())()((()()()()((()((()((()()(((())))(()((())()((((((((()((()(()()(((())())())))(())())))()((((()))))))())))()()))()())((()())()((()()()))(()()(((()(())((((())())((((((((()()()()())))()()()((((()()))))))()((((()(((()))(()()())))((()()(((()))()()())())(((())((()()(())()()()(((())))))()())((()))()))((())()()())()())()()(()))())))())()))(())((()(())))(()(())(()))))(()(())())(()(())(()(()))))((()())()))()((((()()))))())))()()())((())()((()()()))()(((()(()))))(())()()))(((()())))))))))(((())))()))())()))))()()(((())))))))()(()()(()))((()))))((())))((()((())))())))()()(()))())()(()((()())(()(()()())())(()()))()))))(()())()()))()()()()))(()(()(()))))))()(()))()))()()(()((())(()(())))()(((())(())())))))()(()(()))))()))(()()()(())()(()(())))()))))()()(((((())))))())()())())())()())()))))()))))))))())()()()()()()())))()))((())()))())))()((())()))))()))())))))))())()()()))()()(()((((()(((((((()(())((()())((()()))()))))(())))()()()(())((())()())))(())))(())))(((()()))()(())(((()(()))((())))())()))((((()))())()))))))))()(())())))(()))()(()()))())()()(())())))())()()(()())))()((()())(()(())(())))))))))))))(()))))()))))))()()())(()(((((()(()())))())()))(()))()))(()()))()())(()))())()(())((()()))))))())))())()(((())))(()(()))()()))()(()))))))((()())(()))))))()())))()()))))))))((((((((()()()(()))))))()())))())))()()((())()))((())(())))())())))()()()((()((()(())))())()(())))))))))()())))()()()()()()))()))((())())(()(()))))))(()()))()))(())))()))))))))))))(()))))))))()))))()))()())()))()()))))))()))))((()))))(()))())()(())))(()())((((()())))()))))(()))()(()()(())))))())))))()))))))())))())))))())))())())))())(()))))(())()(())))())()))((()()))))))())))((())))))))())))(())))))()()())))))())))))()))))))()))()()()(()(((()())())())(()))())))))((()(())(()))))))))(())))()()()())())(()))))()()()))()))())())())()(())))()(((()((((())))))))()))))))))))))))))))))((())()())(()))))()()))))))(()()(())())))())))((())))((())))))))))))))()))))()(()))))))())))))()))(()()())(()())))))))))()))))))(())))))()()))()())(((())))()))(()))))))))(())())))())))())())())()()))((())()(())()())()))()())(())(()))))()())))(()(((()))))))()(()())()()()))()))))))))()()()(())()())()(((((()))()())())(()))))()()()(())))())))()((()())))(()))())()(()())())(()))()()))((()()))((()()()()())))(())()))(()(())))((()()))))))))())))))))())()()))))))))))))))))(())()(())(())()())())()))()(()))))())())))))()())()(()))()()(())))(())())))))(()))))))))))))))())())(())(())))(((()))()))))())((())(()))())))))))())))))())))()))()))))))))))))())()))))()))))((()))(())))()(())))(())()))()))())))())))))))()(()())())))()()())))(())))))(()))))))))))))(()))()))()))())))(((()()()(())((()())))()())(((()))(())()))((()()()())))())(())(()))))()(((((())))(()))())())))))))((((()()()))())())()(()(()())))))))))()())())))(())))()())(((()(())())()()))())())))))))((()())((()()(()))(()(())))()))()))(()))(()))()()(()(((())((((()))()(()))((())()(()(()())()(()))()())))))(()))()))())()())))())))(())))((())(()())))))()))(())(()))()())()(()()((()(()))))))()(())(()())(())()))(((())()))(()()(()()()))))(()(())))()))))())))))())(()()()()()()(((())))(()()))()((())(((((()()())))(()))(()))()()))(((())())()(((()()()()))))(()))(())())))()())(()()())())))))))()))))((())))()())(()))(()(()))())))))())(())))))()()())())()))()()(())))(()))(())((((((())(()))(()))())()))(()()(())))()))(()()))()))()(())))(())))((()(()))(())()()())())))(((()()())(())()))))))()(((()(((((()()(((())(())))())()((()))))((()())()(())(((())))(((()((()(()(()))(()()))())(()))(())(())))()))))))((((()))()((((()(()))()))()()))))()(()(()))()(()((()(((()(()()(((()))))()(((()(()(()(((()(()())())()()(()(()())())(()((((())(()))()))(((((()()())(())()((()()())))()()(((()()))()((((((((()(())))())((()))))(())))(()))))((()((((()()(())(((((()))(((((((((((((()())))((((()(((()((())())()))((()))()(()()((()()()()(()()(()(()(((())()(()((((((()((()()((())()((((()((()()(()()())((()()()((()((())()(()(((()((())((((())(()))((()(()))(()())()((((((((()(((((((((((()))(()(((()(()()()((((())((())()())()))(())((())(()))(((()((()(())))(()))))((()()))))((((()(()(()())(()(())((((((((()((((()((()(((((()))())()(()))(()()((()(())(((((()(())()(((((()()))))))()(((())()(()()((((())()((())((()(((())(((()))((()()((((()(())))))((()((((()((()((()(((())((()))(((((((()(((()((((((((())()))((((())(((((()((((((((()(((()((()(((()()(((()((((((()()(()((((((((()()(()(()(())((((()())()))))(((()))((((())((((()())((()(())()((()((((((()((((((()(())))()())(((())())())()(())()(()())((()()((((())((((((())(()(((((()((((())()((((()(()(())(()())(((())()((())((((()))()((((((())(()(((()(((()((((((()(((()))(()()())())((()((()())()((((())(((()(()(((((((((())(())))()((()()()()(())((()))(((((((()(((((((((()(()))))(()((((((((()((((()((()()((((((()()(((((((()(()(())()(())((()()()((()(((((()())()(((((()())()()((()(()())(()()()(((()()(((((()((((((()()((()(()()()((((((((((((()((((((((()()(((()())))()(((()()(())())((((()((((()((((()()()(())(())((()(()(((((((((((((((()(())(())))))()()))((()(((()(())((()(((()(()()((((()()(((()(((()(((((()()((()(()(((()))((((((()((((((((()((()((())(((((()(((())(())())((()()))((((())()()((()(((()(((((()()(((()))(((()(()(((((((((((((()))((((((((()(((()))))())((((((((((((())((())((()())(((())((())(()((((((((((()(((())((()()(()((())(((((((((((()))((((((((((((()(()())((()((()((()(()(((()((((((((()()(()((()(()(((()))((()))(((((((((((((()(())((((((())(((()(())(()(()(()((()()))((((()((((()((((())))())((((()((((()))((((((()((((((()((()(((())))((())(()))(()((()((((()((()(((()()))((((()()()(((((((())(((())(()))())((((()())(((()(((((((((((()(()(()((()(((((((((((((((()()((((()((((((((()(((()()((()((((()))(((()(())((((((()((((())()((((()((()))(())()(()(((()((())())((((((()(()(())())(((())(()(()())(((((()((()((())()())(())))(((()(())))))))(((()(((()))()((()(((()()((()())()()))())))(((()))(()(((()(((((((((()(()(((((()()(((()())()()))))()(((()))(((()(()(()(()(()))()(())()))(()(((())))(()))))))))))(())((()((())((()(())()(())((()()((((()()((()()))((())(((()((()(())(())))()(()(((((()((()))())()(((((()()(((()(()((((((())(()))(())()))((()(()()))(())())()))(((())))(()((()(((())(())())))((()()((((((((((((((()((()(()()(()(((()))())()()((()()()(())(()))(()())(((())((())()(())()()(()()(())))((()(((()))))(((()()(()()))())((()((())()))((((()()()())((())))(((()(())(((((()(((((()((()(()((((()()(((()()()(((()())(((()()((((())(()))(((()))(())())((()))(((()((()))(((()()((())((()(((((()((((()()())((()))()((((()((()(()()()("
stop
exit
stop()
exit()
//
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y~x))
coef(lm(y~x-1))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
data(mtcars)
coef(lm(mgp~wt,mtcars))
coef(lm(mpg~wt,mtcars))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x<-(x-mean(x))/sd(x)
x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05
)
coef(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
cor(x,y)
cor(y,x)
library(swirl)
swirl()
quit()
library(swirl)
swirl()
cor(gpa_nor,gch_nor)
l_nor<-lm(gch_nor~gpa_nor)
?cor
str(mtcars)
mtcars$am<-factor(am,levels=c(0,1),labels=c("automatic","manual"))
mtcars$am<-factor(am,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
cors<-sapply(1:ncol(mtcars),function(x) cor(mtcars$mpg,mtcars[,x]))
data(mtcars)
str(mtcars)
mtcars$am<-factor(am,levels=c(0,1),labels=c("automatic","manual"))
mtcars$am<-factor(am,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
cors<-sapply(1:ncol(mtcars),function(x) cor(mtcars$mpg,mtcars[,x]))
library(lattice)
attach(mtcars)
str(mtcars)
mtcars$am<-factor(am,levels=c(0,1),labels=c("automatic","manual"))
mtcars$am<-factor(am,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
cors<-sapply(1:ncol(mtcars),function(x) cor(mtcars$mpg,mtcars[,x]))
data("mtcars")
cors<-sapply(1:ncol(mtcars),function(x) cor(mtcars$mpg,mtcars[,x]))
cors
names(mtcars)
unique(mtcars$gear)
?round
rbind(names(mtcars),round(cors,3))
fit<-lm(mpg~.,data=mtcars)
dim(fit)
length(fit)
fit
fit[1]
fit[12]
fit[2]
plot(fit)
rbind(names(mtcars),round(cors,3))
?mtcars
pairs(mtcars)
pairs(mtcars[,c(1,2,7,9,10)])
cors<-sapply(1:ncol(mtcars),function(x) cor(mtcars$am,mtcars[,x]))
cors
rbind(names(mtcars),round(cors,3))
cors<-sapply(1:ncol(mtcars),function(x) cor(mtcars$mpg,mtcars[,x]))
rbind(names(mtcars),round(cors,3))
cars<-mtcars[,-c(7,10)]
par(mfrow=4)
lapply(2:ncol(cars),function(x) plot(cars[,x],cars$mpg))
par(mfrow=4)
par(mfrow=c(2,4))
lapply(2:ncol(cars),function(x) plot(cars[,x],cars$mpg))
par(mfrow=c(2,4))
plot_mpg<-function(x) plot(cars[,x],cars$mpg,xlab=names(cars)[x],ylab="mpg")
lapply(2:ncol(cars),plot_mpg)
fit<-lm(mpg~vs,cars)
plot(fit$residuals)
fit<-lm(mpg~disp,cars)
plot(fit$residuals)
fit<-lm(mpg~dcyl,cars)
fit<-lm(mpg~cyl,cars)
plot(fit$residuals)
fit<-lm(mpg~am,cars)
plot(fit$residuals)
fit<-lm(mpg~.,cars)
fit
fit$residuals
plot(fit)
fit<-lm(mpg~cyl,cars)
summary(lm(mpg~.,cars))
fun<-function(x) cars$mpg<-lm(mpg~x,data=cars)$residuals
lapply(names(cars)[c(2,3,4,5,6,7,9)],fun)
fun("cyl")
fun(cars$cyl)
fun<-function(x) cars$mpg<-lm(mpg~cars[,x],data=cars)$residuals
lapply(c(2,3,4,5,6,7,9),fun)
plot(cars$am,cars$mpg)
plot(mtcars$am,mtcars$mpg)
par(mfrow=c(2,4))
plot_mpg<-function(x) plot(lm(cars$mpg~cars[,x])$residuals,cars$mpg,xlab=names(cars)[x],ylab="mpg")
lapply(2:ncol(cars),plot_mpg)
par(mfrow=c(2,4))
plot_mpg<-function(x) plot(lm(cars$mpg~cars[,x]),cars$mpg,xlab=names(cars)[x],ylab="mpg")
lapply(2:ncol(cars),plot_mpg)
plot_mpg<-function(x) plot(cars[,x],cars$mpg,xlab=names(cars)[x],ylab="mpg")
lapply(2:ncol(cars),plot_mpg)
summary(lm(mpg~.,cars))
plot_mpg<-function(x) plot(lm(cars$mpg~cars[,x])$residuals,xlab=names(cars)[x],ylab="mpg")
lapply(2:ncol(cars),plot_mpg)
plot_res<-function(x) plot(lm(cars$mpg~cars[,x])$residuals,xlab=names(cars)[x],ylab="mpg")
dim(cars)
fun<-function(x) new_mpg<-lm(cars$mpg~cars[,x],data=cars)$residuals
new_mpg<-cars$mpg
fun<-function(x) {fit<-lm(new_mpg~cars[,x])
new_mpg<-fit$residuals
}
c<-lapply(c(2,3,4,5,6,7,9),fun)
plot(cars$am,new_mpg)
head(new_mpg)
head(cars$mpg)
fit<-lm(new_mpg~cars$cyl)$residuals
head(new_mpg)
new_mpg<-lm(new_mpg~cars$cyl)$residuals
head(new_mpg)
new_mpg<-cars$mpg
fun<-function(x) {fit<-lm(new_mpg~cars[,x])
new_mpg<<-fit$residuals
}
c<-lapply(c(2,3,4,5,6,7,9),fun)
plot(cars$am,new_mpg)
require(lattice)
require(ggplot2)
require(tidyr)
require(dplyr)
#str(mtcars)
#mtcars$am<-factor(am,levels=c(0,1),labels=c("automatic","manual"))
#mtcars$am<-factor(am,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
data(mtcars)
cors<-sapply(1:ncol(mtcars),function(x) cor(mtcars$mpg,mtcars[,x]))
rbind(names(mtcars),round(cors,3))
cars<-mtcars[,-c(7,10,11)]
par(mfrow=c(2,4))
plot_mpg<-function(x) plot(cars[,x],cars$mpg,xlab=names(cars)[x],ylab="mpg")
lapply(2:ncol(cars),plot_mpg)
summary(lm(mpg~.,cars))
new_mpg<-cars$mpg
fun<-function(x) {fit<-lm(new_mpg~cars[,x])
new_mpg<<-fit$residuals
}
c<-lapply(c(2,3,4,5,6,7,9),fun)
new_mpg
names(cars)
cars<-mtcars[,-c(7,10,11)]
names(cars)
names(mtcars)
data(mtcars)
names(mtcars)
?mtcars
?abline
?mtcars
?manipulate
??manipulate
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
setwd("~/GitHub/PMLproject")
training<-read.csv("pml-training.csv")
testing<-read.csv("pml-testing.csv")
require(ggplot2)
require(lattice)
require(caret)
require(randomForest)
set.seed(111)
inTrain<-createDataPartition(training[,1],p=0.6,list=FALSE) #divide the training set
train<-training[inTrain,]                   #by random subsampling
test<-training[-inTrain,]
#fill na values -> ended up eliminating missing cols
missing<-is.na(training)
unusedFeats<-which(colSums(missing)>0) #cols with NAs have 19216 missing values (data has 19622 rows)
train<-train[,-c(1:7,unusedFeats)]
test<-test[,-c(1:7,unusedFeats)]
testing<-testing[,-c(1:7,unusedFeats)]
train2<-sapply(train,as.numeric)
a<-lm(train$classe~train[,1])
a
dim(train)
a<-var(train)
sum(is.na(a))
View(a)
View(a)
a<-sapply(train,var)
a<-sapply(train,2,var)
a<-sapply(train,dim=2,var)
a<-sapply(train[,1:],var)
a<-sapply(train[,1:85],var)
?sapply
?t
a<-sapply(t(train),var)
rm(list=c(a))
rm(a)
pvalues <- numeric(ncol(train)-1)
for(i in seq_len(ncol(train)-1)) {
fit <- lm(train$classe ~ train[, i])
summ <- summary(fit)
pvalues[i] <- summ$coefficients[2, 4]
}
head(pvalues)
